
_c :: import c;
glfw :: import glfw;
glfw_keys :: import glfw_keys;
gl :: import gl;

linalg :: import linalg;
using linalg;

ssd :: import seven_seg_display;

using _c;
using glfw;
using glfw_keys;
using gl;

Paddle :: struct
{
    size: Vec2;
    pos : Vec2;
    vel : Vec2;
}

Ball :: struct
{
    pos : Vec2;
    dir : Vec2;
    speed : float;
    diameter : float;
}

InputState :: struct
{
    dt: float;
    player_speed: float;
    exit_requested: bool;

    keys     : [GLFWkey.GLFW_KEY_MENU]bool;
    old_keys : [GLFWkey.GLFW_KEY_MENU]bool;
}

GameState :: struct
{
    window_size : Vec2;
    input_state : InputState;

    player_digit : ssd.Digit;
    ai_digit     : ssd.Digit;

    ball       : Ball;

    paddle_speed  : float;
    player_paddle : Paddle;
    ai_paddle     : Paddle;

    player_score : u32;
    ai_score     : u32;
}

main :: () -> int
{
    open_std_handles();

    if (!glfwInit())
    {
        printf("glfwInit failed\n");
        return 9;
    }

    width := 858;
    height := 525;

    glfwWindowHint(GLFW_RESIZABLE, GLFW_FALSE);
    window : *GLFWwindow = glfwCreateWindow(width, height, "Pong", null, null);
    if (!window)
    {
        printf("glfwCreateWindow failed\n");
        return 9;
    }

    glfwSetKeyCallback(window, key_callback);
    glfwSetErrorCallback(error_callback);

    glfwMakeContextCurrent(window);
    glfwSwapInterval(1);
    load(*glfwGetProcAddress);

    glViewport(0, 0, width, height);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(0.0, (:double)width, 0.0, (:double)height, 0.0, 1.0);

    // glClearColor(0.1, 0.3, 0.5, 1.0);
    glClearColor(0.0, 0.0, 0.0, 0.0);

    gs : GameState;
    glfwSetWindowUserPointer(window, *gs.input_state);

    gs.window_size = { (:float)width, (:float)height };


    digit_width : float = 40.0;
    digit_height := digit_width * 1.75;
    digit_y := (:float)height - digit_height * 1.2;
    player_digit_x := (:float)width / 2.0 - digit_width * 2.0;
    ai_digit_x := (:float)width / 2.0 + digit_width;
    gs.player_digit = ssd.create_digit(player_digit_x, digit_y, digit_width, digit_height,
                                       (:u8)0);
    gs.ai_digit = ssd.create_digit(ai_digit_x, digit_y, digit_width, digit_height,
                                   (:u8)0);

    gs.paddle_speed = (:float)height / 2.5;

    gs.ball.pos = { gs.window_size.x / 2.0, gs.window_size.y / 2.0 };
    gs.ball.dir = vec2_normalize({ -1.0, -0.7 });
    gs.ball.speed = (:float)width * 0.5;

    player_width := (:float)width * 0.02;
    player_height := (:float)height * 0.1;
    half_player_width := player_width / 2.0;
    half_player_height := player_height / 2.0;
    player_x := 10.0 + half_player_width;
    player_y := (:float)height / 2.0;
    gs.player_paddle = create_paddle(player_width, player_height, player_x, player_y);

    ai_x := (:float)width - (10.0 + half_player_width);
    gs.ai_paddle = create_paddle(player_width, player_height, ai_x, player_y);

    gs.ball.diameter = player_width * 0.8;

    last_frame_time : double = glfwGetTime();

    while (!glfwWindowShouldClose(window) && !gs.input_state.exit_requested)
    {
        current_frame_time := glfwGetTime();
        dt := (:float)(current_frame_time - last_frame_time);
        last_frame_time = current_frame_time;

        draw(window, *gs);

        process_inputs(dt, *gs.input_state);
        simulate(*gs);
    }

    glfwDestroyWindow(window);
    glfwTerminate();
}

key_callback :: (window: *GLFWwindow, key: int, scancode: int, action: int, mods: int) -> void
{
    using glfw_keys;
    using GLFWkey;
    // using glfw_keys.GLFWKey;

    input_data := (:*InputState)glfwGetWindowUserPointer(window);

    if (input_data)
    {
        switch (action)
        {
            case GLFW_PRESS, GLFW_REPEAT:
            {
                input_data.keys[key] = true;
            }

            case GLFW_RELEASE:
            {
                // printf("Key released\n");
                input_data.keys[key] = false;
            }
        }
    }
    else
    {
        fprintf(stderr, "No window user pointer!!!\n");
    }
}

error_callback :: (error: int, description: *u8) -> void
{
    fprintf(stderr, "GLFW error:%lu:s\n", error, description);
}

create_paddle :: (width: float, height: float, x: float, y: float) -> Paddle
{
    result : Paddle;
    result.size = { width, height };
    result.pos = { x, y };
    result.vel = { 0.0, 0.0 };

    return result;
}

draw :: (window: *GLFWwindow, game_state : *GameState)
{
    glClear(GL_COLOR_BUFFER_BIT);

    draw_center_line(game_state);

    draw_ball(*game_state.ball);
    draw_paddle(*game_state.player_paddle);
    draw_paddle(*game_state.ai_paddle);

    ssd.draw_digit(*game_state.player_digit);
    ssd.draw_digit(*game_state.ai_digit);

    glfwSwapBuffers(window);
}

draw_center_line :: (gs: *GameState)
{
    center_x := gs.window_size.x / 2.0;

    line_width := gs.window_size.x * 0.01;
    half_line_width := line_width / 2.0;

    segment_count := 15;
    current_segment_y : float = 0.0;
    segment_height := gs.window_size.y / (:float)segment_count;

    draw := true;
    for (i := 0; i < segment_count; i = i + 1)
    {
        if (draw)
        {
            min : Vec2 = { center_x - half_line_width, current_segment_y };
            max : Vec2 = { center_x + half_line_width, current_segment_y + segment_height };
            draw_rect({ min, max }, { 0.5, 0.5, 0.5 });

        }

        current_segment_y = current_segment_y + segment_height;
        draw = !draw;
    }
}

draw_ball :: (ball: *Ball)
{
    glPointSize(ball.diameter);

    glColor4f(1.0, 1.0, 1.0, 1.0);

    glBegin(GL_POINTS);
    glVertex2f(ball.pos.x, ball.pos.y);
    glEnd();
}

draw_paddle :: (paddle : *Paddle)
{
    bl : Vec2 = { paddle.pos.x - (paddle.size.x / 2.0), paddle.pos.y - (paddle.size.y / 2.0) };
    tr : Vec2 = { bl.x + paddle.size.x, bl.y + paddle.size.y };

    draw_rect({ bl, tr }, { 1.0, 1.0, 1.0 });
}

draw_rect :: (rect: AABB, color: Vec3)
{
    glColor4f(color.x, color.y, color.z, 1.0);

    glBegin(GL_TRIANGLES);
    glVertex2f(rect.min.x, rect.min.y);
    glVertex2f(rect.max.x, rect.max.y);
    glVertex2f(rect.min.x, rect.max.y);

    glVertex2f(rect.min.x, rect.min.y);
    glVertex2f(rect.max.x, rect.min.y);
    glVertex2f(rect.max.x, rect.max.y);
    glEnd();
}

process_inputs :: (dt: float, input_state: *InputState)
{
    input_state.dt = dt;

    glfwPollEvents();

    using GLFWkey;

    input_state.player_speed = 0.0;

    if (is_key_down(input_state, GLFW_KEY_W))
    {
        input_state.player_speed = input_state.player_speed + 1.0;
    }
    if (is_key_down(input_state, GLFW_KEY_S))
    {
        input_state.player_speed = input_state.player_speed - 1.0;
    }

    if (is_key_down(input_state, GLFW_KEY_ESCAPE))
    {
        input_state.exit_requested = true;
    }

    for (i := 0; i < array_length(input_state.keys); i = i + 1)
    {
        input_state.old_keys[i] = input_state.keys[i];
    }
}

simulate :: (game_state: *GameState)
{
    input := *game_state.input_state;
    dt := input.dt;


    simulate_ball(game_state, *game_state.ball);

    player_speed := dt * input.player_speed * game_state.paddle_speed;
    game_state.player_paddle.vel.y = player_speed;
    simulate_paddle(game_state, *game_state.player_paddle);

    ai_dir := 0.0;
    if (game_state.ai_paddle.pos.y > game_state.ball.pos.y)
    {
        ai_dir = -1.0;
    }
    else
    {
        ai_dir = 1.0;
    }

    ai_speed := dt * ai_dir * game_state.paddle_speed;
    game_state.ai_paddle.vel.y = ai_speed;
    simulate_paddle(game_state, *game_state.ai_paddle);
}

simulate_ball :: (game_state: *GameState, ball: *Ball)
{
    velocity := vec2_mul(ball.dir, ball.speed);
    velocity = vec2_mul(velocity, game_state.input_state.dt);

    radius := ball.diameter / 2.0;

    simulate_ball_paddle_collision(game_state, ball, *velocity, *game_state.player_paddle);
    simulate_ball_paddle_collision(game_state, ball, *velocity, *game_state.ai_paddle);

    ball.pos.x = ball.pos.x + velocity.x;

    ball.pos.y = ball.pos.y + velocity.y;

    if (ball.pos.x - radius < 0.0)
    {
        ball.pos.x = radius;
        ball.dir.x = -ball.dir.x;

        ssd.set_digit(*game_state.ai_digit, game_state.ai_digit.value + (:u8)1);
    }
    else if (ball.pos.x + radius > game_state.window_size.x)
    {
        ball.pos.x = game_state.window_size.x - radius;
        ball.dir.x = -ball.dir.x;

        ssd.set_digit(*game_state.player_digit, game_state.player_digit.value + (:u8)1);
    }

    if (ball.pos.y - radius < 0.0)
    {
        ball.pos.y = radius;
        ball.dir.y = -ball.dir.y;
    }
    else if (ball.pos.y + radius > game_state.window_size.y)
    {
        ball.pos.y = game_state.window_size.y - radius;
        ball.dir.y = -ball.dir.y;
    }
}

simulate_ball_paddle_collision :: (gs: *GameState, ball: *Ball,
                                   move_vector: *Vec2, paddle: *Paddle)
{
    radius := ball.diameter / 2.0;
    ball_p1 : Vec2 = { ball.pos.x - radius, ball.pos.y + radius };
    ball_p2 : Vec2 = vec2_add(ball_p1, move_vector);
    ball_p3 : Vec2 = { ball.pos.x - radius, ball.pos.y - radius };
    ball_p4 : Vec2 = vec2_add(ball_p3, move_vector);
    ball_p5 : Vec2 = { ball.pos.x + radius, ball.pos.y + radius };
    ball_p6 : Vec2 = vec2_add(ball_p5, move_vector);
    ball_p7 : Vec2 = { ball.pos.x + radius, ball.pos.y - radius };
    ball_p8 : Vec2 = vec2_add(ball_p7, move_vector);

    half_paddle_width := paddle.size.x / 2.0;
    half_paddle_height := paddle.size.y / 2.0;

    paddle_p1 : Vec2;
    paddle_p2 : Vec2;

    if (ball.dir.x < 0.0)
    {
        paddle_p1 = { paddle.pos.x + half_paddle_width, paddle.pos.y + half_paddle_height };
        paddle_p2 = { paddle.pos.x + half_paddle_width, paddle.pos.y - half_paddle_height };
    }
    else
    {
        paddle_p1 = { paddle.pos.x - half_paddle_width, paddle.pos.y + half_paddle_height };
        paddle_p2 = { paddle.pos.x - half_paddle_width, paddle.pos.y - half_paddle_height };
    }

    intersect : Vec2;

    diff : Vec2;
    apply_correction := false;

    if (line_segments_intersect(ball_p1, ball_p2, paddle_p1, paddle_p2, *intersect))
    {
        diff = vec2_sub(intersect, ball_p1);
        apply_correction = true;
    }
    else if (line_segments_intersect(ball_p3, ball_p4, paddle_p1, paddle_p2, *intersect))
    {
        diff = vec2_sub(intersect, ball_p2);
        apply_correction = true;
    } else if (line_segments_intersect(ball_p5, ball_p6, paddle_p1, paddle_p2, *intersect))
    {
        diff = vec2_sub(intersect, ball_p5);
        apply_correction = true;
    }
    else if (line_segments_intersect(ball_p7, ball_p8, paddle_p1, paddle_p2, *intersect))
    {
        diff = vec2_sub(intersect, ball_p7);
        apply_correction = true;
    }

    if (apply_correction)
    {
        ball.dir.x = ball.dir.x * -1.0;
        remain := vec2_sub(move_vector, diff);
        remain.x = -remain.x;
        <move_vector = vec2_add(diff, remain);
    }
}

simulate_paddle :: (game_state: *GameState, paddle: *Paddle)
{
    paddle.pos.y = paddle.pos.y + paddle.vel.y;

    half_height := paddle.size.y / 2.0;

    if (paddle.pos.y + half_height > game_state.window_size.y)
    {
        paddle.pos.y = game_state.window_size.y - half_height;
    }
    else if (paddle.pos.y - half_height < 0.0)
    {
        paddle.pos.y = half_height;
    }
}

is_key_down :: (input_state: *InputState, key: GLFWkey) -> bool
{
    return input_state.keys[key];
}

is_key_pressed :: (input_state: *InputState, key: GLFWkey) -> bool
{
    return input_state.keys[key] && !input_state.old_keys[key];
}

is_key_released :: (input_state: *InputState, key: GLFWkey) -> bool
{
    return !input_state.keys[key] && input_state.old_keys[key];
}

